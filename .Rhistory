# Summary table.
locs %>% group_by(site) %>% summarise(n=n()) %>%
kable(col.names=c('Site abbr.', 'N. roosts'),
caption='Number of roost sites calculated per site in 2019') %>%
kable_styling(full_width=FALSE, position='float_left')
# Load libraries
library('tidyverse')
library('lubridate')
library('knitr')
library('kableExtra')
sites <- read.csv('../h_data/raw/intensives.csv', stringsAsFactors=FALSE)
# Load in used and available points.
avail <- read.csv('../h_data/processed/available_utm.csv', stringsAsFactors=FALSE)
locs <- read.csv('../h_data/processed/used_2_attributes.csv', stringsAsFactors=FALSE)
# Clean up the messy datasets.
avail <- avail %>% dplyr::select(canopy.closure=CR_CLOSURE, basal.area=BASAL_AREA, age=PROJ_AGE_1, f_hab=f_hab, n_hab=n_hab, site=site) %>%
mutate(case=0)
used <- locs %>% dplyr::select(canopy.closure=CR_CLOSURE, basal.area=BASAL_AREA, age=PROJ_AGE_1, f_hab=f_hab, n_hab=n_hab, site=site) %>%
mutate(case=1)
# Combine.
points <- bind_rows(used, avail)
# Summary table.
roost.summary <- locs %>% group_by(site) %>% summarise(n=n())
knitr::kable(roost.summary, caption = 'Number of roosts calculated per site in 2019', col.names=c('Site abbr.', 'N. roosts'))
library('lme4')
library('AICcmodavg')
# Winnow to final data set.
n.points <- points
moddefs <- c('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i')
bind_cols(modnames, moddefs)
modnames <- c('Nesting HSI', 'Foraging HSI', 'Age', 'Basal area', 'Canopy closure', 'Nesting HSI + canopy closure', 'Nesting HSI + age', 'Nesting HSI + basal area', 'Foraging HSI + canopy closure')
bind_cols(modnames, moddefs)
class(modnames)
list(mod.name=modnames, mod.defs=moddefs)
list(mod.name=modnames, mod.defs=moddefs) %>%
bind_rows()
models
View(avail)
# Load in used and available points.
avail <- read.csv('../h_data/processed/available_utm.csv', stringsAsFactors=FALSE)
# Load in used and available points.
avail <- read.csv('../h_data/processed/available_utm.csv', stringsAsFactors=FALSE)
locs <- read.csv('../h_data/processed/used_2_attributes_2.csv', stringsAsFactors=FALSE)
# Clean up the messy datasets.
avail <- avail %>% dplyr::select(canopy.closure=CR_CLOSURE, basal.area=BASAL_AREA, age=PROJ_AGE_1, f_hab=f_hab, n_hab=n_hab, site=site, cover=BCLCS_LV_4) %>%
mutate(case=0)
used <- locs %>% dplyr::select(canopy.closure=CR_CLOSURE, basal.area=BASAL_AREA, age=PROJ_AGE_1, f_hab=f_hab, n_hab=n_hab, site=site, cover=BCLCS_LV_4) %>%
mutate(case=1)
# Combine.
points <- bind_rows(used, avail)
# Winnow to final data set.
n.points <- points %>%
filter(n_hab >= 0) %>%
filter(cover %in% c('TC', 'TM', 'TB')) %>%
drop_na()
# Winnow to final data set.
points <- points %>%
filter(n_hab >= 0) %>%
filter(cover %in% c('TC', 'TM', 'TB')) %>%
drop_na()
# Summary table.
roost.summary <- points %>% filter(case==1) %>% group_by(site) %>% summarise(n=n())
knitr::kable(roost.summary, caption = 'Number of roosts calculated per site in 2019', col.names=c('Site abbr.', 'N. roosts'))
library('tidyverse')
library('exiftoolr')
library('lubridate')
library('purrr')
# Fill in these three things:
# Where are the pictures now?
path.in <- 'D:/RECONYX/Ruby Lake/100RECNX/'
# What site is it?
site <- 'RLK'
# Where are the pictures going?
# END WITH A FORWARD SLASH
path.out <- 'E:/'
# Make a new directory for the files.
site.dir <- paste0(path.out, site)
dir.create(site.dir)
# Get a list of the photos.
photo.list <- list.files(path.in, full.names=TRUE) %>%
exif_read(tags=c('filename', 'CreateDate', 'SerialNumber'))
# Create a data frame.
photo.df <- photo.list %>%
dplyr::select(filename=FileName, datetime=CreateDate,
serial=SerialNumber) %>%
mutate(site=site, datetime=ymd_hms(datetime)) %>%
add_column(interest='', live.chicks='', class='', family='',
genus='', species='', common='', size='', comments='')
# Save a csv with all the photos.
write.csv(photo.df,
file=paste0(site.dir, '/', site, '_photos_all.csv'),
row.names=FALSE)
# Add a week column.
photo.df <- photo.df %>%
mutate(week=week(datetime), week=paste0('week_', week))
# Nest the data frame.
photo.nest <- photo.df %>% group_nest(week)
# Split the data frame by week and save as separate csvs.
walk2(photo.nest$week, photo.nest$data, function(week, data) {
path <-  paste0(site.dir, '/', week, '/', site, '_photos_', week, '.csv')
dir.create(dirname(path), recursive=TRUE, showWarning=FALSE)
write.csv(data, file=path, row.names=FALSE)
})
# Copy the photos into the appropriate directories.
walk2(photo.df$week, photo.df$filename, function(week, filename) {
target <-  paste0(site.dir, '/', week, '/', filename)
source <- file.path(path.in, filename)
file.copy(source, target)
})
# Fill in these three things:
# Where are the pictures now?
path.in <- 'D:/RECONYX/Ruby Lake/101RECNX/'
# What site is it?
site <- 'RLK2'
# Make a new directory for the files.
site.dir <- paste0(path.out, site)
dir.create(site.dir)
# Get a list of the photos.
photo.list <- list.files(path.in, full.names=TRUE) %>%
exif_read(tags=c('filename', 'CreateDate', 'SerialNumber'))
# Create a data frame.
photo.df <- photo.list %>%
dplyr::select(filename=FileName, datetime=CreateDate,
serial=SerialNumber) %>%
mutate(site=site, datetime=ymd_hms(datetime)) %>%
add_column(interest='', live.chicks='', class='', family='',
genus='', species='', common='', size='', comments='')
# Save a csv with all the photos.
write.csv(photo.df,
file=paste0(site.dir, '/', site, '_photos_all.csv'),
row.names=FALSE)
# Add a week column.
photo.df <- photo.df %>%
mutate(week=week(datetime), week=paste0('week_', week))
# Nest the data frame.
photo.nest <- photo.df %>% group_nest(week)
# Split the data frame by week and save as separate csvs.
walk2(photo.nest$week, photo.nest$data, function(week, data) {
path <-  paste0(site.dir, '/', week, '/', site, '_photos_', week, '.csv')
dir.create(dirname(path), recursive=TRUE, showWarning=FALSE)
write.csv(data, file=path, row.names=FALSE)
})
# Copy the photos into the appropriate directories.
walk2(photo.df$week, photo.df$filename, function(week, filename) {
target <-  paste0(site.dir, '/', week, '/', filename)
source <- file.path(path.in, filename)
file.copy(source, target)
})
# Fill in these three things:
# Where are the pictures now?
path.in <- 'D:/RECONYX/Ford Mountain/100RECNX/'
# What site is it?
site <- 'MTF'
# Make a new directory for the files.
site.dir <- paste0(path.out, site)
dir.create(site.dir)
# Get a list of the photos.
photo.list <- list.files(path.in, full.names=TRUE) %>%
exif_read(tags=c('filename', 'CreateDate', 'SerialNumber'))
# Load libraries
library('tidyverse')
library('lubridate')
library('knitr')
library('kableExtra')
sites <- read.csv('../h_data/raw/intensives.csv', stringsAsFactors=FALSE)
# Load in used and available points.
avail <- read.csv('../h_data/processed/available_utm.csv', stringsAsFactors=FALSE)
locs <- read.csv('../h_data/processed/used_2_attributes_2.csv', stringsAsFactors=FALSE)
# Clean up the messy datasets.
avail <- avail %>% dplyr::select(canopy.closure=CR_CLOSURE, basal.area=BASAL_AREA, age=PROJ_AGE_1, f_hab=f_hab, n_hab=n_hab, site=site, cover=BCLCS_LV_4) %>%
mutate(case=0)
used <- locs %>% dplyr::select(canopy.closure=CR_CLOSURE, basal.area=BASAL_AREA, age=PROJ_AGE_1, f_hab=f_hab, n_hab=n_hab, site=site, cover=BCLCS_LV_4) %>%
mutate(case=1)
# Combine.
points <- bind_rows(used, avail)
# Winnow to final data set.
points <- points %>%
filter(n_hab >= 0) %>%
filter(cover %in% c('TC', 'TM', 'TB')) %>%
drop_na()
# Summary table.
roost.summary <- points %>% filter(case==1) %>% group_by(site) %>% summarise(n=n())
knitr::kable(roost.summary, caption = 'Number of roosts calculated per site in 2019', col.names=c('Site abbr.', 'N. roosts'))
library('lme4')
library('AICcmodavg')
n.points <- points
n.hab <- glmer(case ~ n_hab + (1|site), data=n.points, family=binomial(link='logit'))
f.hab <- glmer(case ~ f_hab + (1|site), data=n.points, family=binomial(link='logit'))
s.age <- glmer(case ~ age + (1|site), data=n.points, family=binomial(link='logit'))
s.basal <- glmer(case ~ basal.area + (1|site), data=n.points, family=binomial(link='logit'))
s.canopy <- glmer(case ~ canopy.closure + (1|site), data=n.points, family=binomial(link='logit'))
nb.canopy <- glmer(case ~ n_hab + canopy.closure + (1|site), data=n.points, family=binomial(link='logit'))
nb.age <- glmer(case ~ n_hab + age + (1|site), data=n.points, family=binomial(link='logit'))
nb.basal <- glmer(case ~ n_hab + basal.area + (1|site), data=n.points, family=binomial(link='logit'))
fb.canopy <- glmer(case ~ f_hab + canopy.closure + (1|site), data=n.points, family=binomial(link='logit'))
site <- glmer(case ~ 1 + (1|site), data=n.points, family=binomial(link='logit'))
models <- c(n.hab, f.hab, s.age, s.basal, s.canopy, nb.canopy, nb.age, nb.basal, fb.canopy)
modnames <- c('Nesting HSI', 'Foraging HSI', 'Age', 'Basal area', 'Canopy closure', 'Nesting HSI + canopy closure', 'Nesting HSI + age', 'Nesting HSI + basal area', 'Foraging HSI + canopy closure')
# What site is it?
site <- 'MTF'
# Create a data frame.
photo.df <- photo.list %>%
dplyr::select(filename=FileName, datetime=CreateDate,
serial=SerialNumber) %>%
mutate(site=site, datetime=ymd_hms(datetime)) %>%
add_column(interest='', live.chicks='', class='', family='',
genus='', species='', common='', size='', comments='')
# Save a csv with all the photos.
write.csv(photo.df,
file=paste0(site.dir, '/', site, '_photos_all.csv'),
row.names=FALSE)
# Add a week column.
photo.df <- photo.df %>%
mutate(week=week(datetime), week=paste0('week_', week))
# Nest the data frame.
photo.nest <- photo.df %>% group_nest(week)
# Split the data frame by week and save as separate csvs.
walk2(photo.nest$week, photo.nest$data, function(week, data) {
path <-  paste0(site.dir, '/', week, '/', site, '_photos_', week, '.csv')
dir.create(dirname(path), recursive=TRUE, showWarning=FALSE)
write.csv(data, file=path, row.names=FALSE)
})
# Copy the photos into the appropriate directories.
walk2(photo.df$week, photo.df$filename, function(week, filename) {
target <-  paste0(site.dir, '/', week, '/', filename)
source <- file.path(path.in, filename)
file.copy(source, target)
})
# Load libraries
library('tidyverse')
library('lubridate')
library('knitr')
library('kableExtra')
sites <- read.csv('../h_data/raw/intensives.csv', stringsAsFactors=FALSE)
# Load in used and available points.
avail <- read.csv('../h_data/processed/available_utm.csv', stringsAsFactors=FALSE)
locs <- read.csv('../h_data/processed/used_2_attributes_2.csv', stringsAsFactors=FALSE)
# Clean up the messy datasets.
avail <- avail %>% dplyr::select(canopy.closure=CR_CLOSURE, basal.area=BASAL_AREA, age=PROJ_AGE_1, f_hab=f_hab, n_hab=n_hab, site=site, cover=BCLCS_LV_4) %>%
mutate(case=0)
used <- locs %>% dplyr::select(canopy.closure=CR_CLOSURE, basal.area=BASAL_AREA, age=PROJ_AGE_1, f_hab=f_hab, n_hab=n_hab, site=site, cover=BCLCS_LV_4) %>%
mutate(case=1)
# Combine.
points <- bind_rows(used, avail)
# Winnow to final data set.
points <- points %>%
filter(n_hab >= 0) %>%
filter(cover %in% c('TC', 'TM', 'TB')) %>%
drop_na()
# Summary table.
roost.summary <- points %>% filter(case==1) %>% group_by(site) %>% summarise(n=n())
knitr::kable(roost.summary, caption = 'Number of roosts calculated per site in 2019', col.names=c('Site abbr.', 'N. roosts'))
library('lme4')
library('AICcmodavg')
n.points <- points
n.hab <- glmer(case ~ n_hab + (1|site), data=n.points, family=binomial(link='logit'))
f.hab <- glmer(case ~ f_hab + (1|site), data=n.points, family=binomial(link='logit'))
s.age <- glmer(case ~ age + (1|site), data=n.points, family=binomial(link='logit'))
s.basal <- glmer(case ~ basal.area + (1|site), data=n.points, family=binomial(link='logit'))
s.canopy <- glmer(case ~ canopy.closure + (1|site), data=n.points, family=binomial(link='logit'))
nb.canopy <- glmer(case ~ n_hab + canopy.closure + (1|site), data=n.points, family=binomial(link='logit'))
nb.age <- glmer(case ~ n_hab + age + (1|site), data=n.points, family=binomial(link='logit'))
nb.basal <- glmer(case ~ n_hab + basal.area + (1|site), data=n.points, family=binomial(link='logit'))
fb.canopy <- glmer(case ~ f_hab + canopy.closure + (1|site), data=n.points, family=binomial(link='logit'))
site <- glmer(case ~ 1 + (1|site), data=n.points, family=binomial(link='logit'))
models <- c(n.hab, f.hab, s.age, s.basal, s.canopy, nb.canopy, nb.age, nb.basal, fb.canopy)
modnames <- c('Nesting HSI', 'Foraging HSI', 'Age', 'Basal area', 'Canopy closure', 'Nesting HSI + canopy closure', 'Nesting HSI + age', 'Nesting HSI + basal area', 'Foraging HSI + canopy closure')
aictab(models, modnames=modnames)
library('MuMIn')
aictab(models, modnames=modnames)
r.squaredGLMM(b.canopy)
library('MuMIn')
aictab(models, modnames=modnames)
r.squaredGLMM(nb.canopy)
r.squaredGLMM(n.hab)
aictab(models, modnames=modnames) %>%
kable()
aictab(models, modnames=modnames) %>%
kable(col.names=c('Model', 'K', 'AICc', 'Delta AIC', 'Likelihood', 'log-likelihood', 'Cum. Aikake weights'))
aictab(models, modnames=modnames) #%>%
#kable(col.names=c('Model', 'K', 'AICc', 'Delta AIC', 'Likelihood', 'log-likelihood', 'Cum. Aikake weights'))
aics <- aictab(models, modnames=modnames) #%>%
aics
dim(aics)
aics %>% kable(col.names=c('Model', 'K', 'AICc', 'Delta AIC', 'AIC weight', 'Cum. Aikake weights', 'log-likelihood'))
aics %>% kable(col.names=c('Model', 'K', 'AICc', 'Delta AIC', 'AIC weight', 'Cum. Aikake weights', 'log-likelihood', 'extra'))
aics %>% dplyr::select(1:8) %>%
kable(col.names=c('Model', 'K', 'AICc', 'Delta AIC', 'AIC weight', 'Cum. Aikake weights', 'log-likelihood'))
aics <- aictab(models, modnames=modnames)
aics %>% dplyr::select(1:7) %>%
kable(col.names=c('Model', 'K', 'AICc', 'Delta AIC', 'AIC weight', 'Cum. Aikake weights', 'log-likelihood'))
aics <- aictab(models, modnames=modnames)
aics %>% dplyr::select(1:7) %>%
kable(col.names=c('Model', 'K', 'AICc', '$\\Delta AIC', 'AIC weight', 'Cum. AIC weights', 'log-likelihood'))
aics
r.squaredGLMM(nb.canopy)
r.top <- r.squaredGLMM(nb.canopy)
r.top[2,2]
r.top[1,2]
r.top[1,2] %>% round(digits=2)
aics <- aictab(models, modnames=modnames)
r.nb.canopy <- r.squaredGLMM(nb.canopy)
r.n.hab <- r.squaredGLMM(n.hab)
aics %>% dplyr::select(1:7) %>%
kable(col.names=c('Model', 'K', 'AIC~c~', '\Delta AIC', 'AIC weight', 'Cum. AIC weights', 'log-likelihood'))
aics %>% dplyr::select(1:7) %>%
kable(col.names=c('Model', 'K', 'AIC~c~', '$\Delta AIC', 'AIC weight', 'Cum. AIC weights', 'log-likelihood'))
aics %>% dplyr::select(1:7) %>%
kable(col.names=c('Model', 'K', 'AIC~c~', '$\\Delta AIC', 'AIC weight', 'Cum. AIC weights', 'log-likelihood'))
aics %>% dplyr::select(1:7) %>%
kable(col.names=c('Model', 'K', 'AIC~c~', '$\Delta AIC', 'AIC weight', 'Cum. AIC weights', 'log-likelihood'))
aics %>% dplyr::select(1:7) %>%
kable(col.names=c('Model', 'K', 'AIC~c~', expression(Delta), 'AIC weight', 'Cum. AIC weights', 'log-likelihood'))
aics %>% dplyr::select(1:7) %>%
kable(col.names=c('Model', 'K', 'AIC~c~', '\u03b1', 'AIC weight', 'Cum. AIC weights', 'log-likelihood'))
aics <- aictab(models, modnames=modnames)
r.nb.canopy <- r.squaredGLMM(nb.canopy)
r.n.hab <- r.squaredGLMM(n.hab)
aics %>% dplyr::select(1:7) %>%
kable(col.names=c('Model', 'K', 'AIC~c~', '\u0394', 'AIC weight', 'Cum. AIC weights', 'log-likelihood'))
r.nb.canopy[1,2] %>% round(digits=2)
4+5
nb.canopy
n.hab
aics <- aictab(models, modnames=modnames)
r.nb.canopy <- r.squaredGLMM(nb.canopy)
r.n.hab <- r.squaredGLMM(n.hab)
aics %>% dplyr::select(1:7) %>%
kable(col.names=c('Model', 'K', 'AIC~c~', '\u0394', 'AIC weight', 'Cum. AIC weights', 'log-likelihood'))
aics <- aictab(models, modnames=modnames)
r.nb.canopy <- r.squaredGLMM(nb.canopy)
r.n.hab <- r.squaredGLMM(n.hab)
aics %>% dplyr::select(1:7) %>%
kable(col.names=c('Model', 'K', 'AIC~c~', '\u0394', 'AIC weight', 'Cum. AIC weights', 'log-likelihood'))
# Load libraries
library('tidyverse')
library('lubridate')
library('knitr')
library('kableExtra')
sites <- read.csv('../h_data/raw/intensives.csv', stringsAsFactors=FALSE)
# Load in used and available points.
avail <- read.csv('../h_data/processed/available_utm.csv', stringsAsFactors=FALSE)
locs <- read.csv('../h_data/processed/used_2_attributes_2.csv', stringsAsFactors=FALSE)
# Clean up the messy datasets.
avail <- avail %>% dplyr::select(canopy.closure=CR_CLOSURE, basal.area=BASAL_AREA, age=PROJ_AGE_1, f_hab=f_hab, n_hab=n_hab, site=site, cover=BCLCS_LV_4) %>%
mutate(case=0)
used <- locs %>% dplyr::select(canopy.closure=CR_CLOSURE, basal.area=BASAL_AREA, age=PROJ_AGE_1, f_hab=f_hab, n_hab=n_hab, site=site, cover=BCLCS_LV_4) %>%
mutate(case=1)
# Combine.
points <- bind_rows(used, avail)
# Winnow to final data set.
points <- points %>%
filter(n_hab >= 0) %>%
filter(cover %in% c('TC', 'TM', 'TB')) %>%
drop_na()
# Summary table.
roost.summary <- points %>% filter(case==1) %>% group_by(site) %>% summarise(n=n())
knitr::kable(roost.summary, caption = 'Number of roosts calculated per site in 2019', col.names=c('Site abbr.', 'N. roosts'))
library('lme4')
library('AICcmodavg')
n.points <- points
n.hab <- glmer(case ~ n_hab + (1|site), data=n.points, family=binomial(link='logit'))
f.hab <- glmer(case ~ f_hab + (1|site), data=n.points, family=binomial(link='logit'))
s.age <- glmer(case ~ age + (1|site), data=n.points, family=binomial(link='logit'))
s.basal <- glmer(case ~ basal.area + (1|site), data=n.points, family=binomial(link='logit'))
s.canopy <- glmer(case ~ canopy.closure + (1|site), data=n.points, family=binomial(link='logit'))
nb.canopy <- glmer(case ~ n_hab + canopy.closure + (1|site), data=n.points, family=binomial(link='logit'))
nb.age <- glmer(case ~ n_hab + age + (1|site), data=n.points, family=binomial(link='logit'))
nb.basal <- glmer(case ~ n_hab + basal.area + (1|site), data=n.points, family=binomial(link='logit'))
fb.canopy <- glmer(case ~ f_hab + canopy.closure + (1|site), data=n.points, family=binomial(link='logit'))
site <- glmer(case ~ 1 + (1|site), data=n.points, family=binomial(link='logit'))
models <- c(n.hab, f.hab, s.age, s.basal, s.canopy, nb.canopy, nb.age, nb.basal, fb.canopy)
modnames <- c('Nesting HSI', 'Foraging HSI', 'Age', 'Basal area', 'Canopy closure', 'Nesting HSI + canopy closure', 'Nesting HSI + age', 'Nesting HSI + basal area', 'Foraging HSI + canopy closure')
aics <- aictab(models, modnames=modnames)
r.nb.canopy <- r.squaredGLMM(nb.canopy)
r.n.hab <- r.squaredGLMM(n.hab)
aics %>% dplyr::select(1:7) %>%
kable(col.names=c('Model', 'K', 'AIC~c~', '\u0394', 'AIC weight', 'Cum. AIC weights', 'log-likelihood'))
# Load libraries
library('tidyverse')
library('lubridate')
library('knitr')
library('kableExtra')
sites <- read.csv('../h_data/raw/intensives.csv', stringsAsFactors=FALSE)
# Load in used and available points.
avail <- read.csv('../h_data/processed/available_utm.csv', stringsAsFactors=FALSE)
locs <- read.csv('../h_data/processed/used_2_attributes_2.csv', stringsAsFactors=FALSE)
# Clean up the messy datasets.
avail <- avail %>% dplyr::select(canopy.closure=CR_CLOSURE, basal.area=BASAL_AREA, age=PROJ_AGE_1, f_hab=f_hab, n_hab=n_hab, site=site, cover=BCLCS_LV_4) %>%
mutate(case=0)
used <- locs %>% dplyr::select(canopy.closure=CR_CLOSURE, basal.area=BASAL_AREA, age=PROJ_AGE_1, f_hab=f_hab, n_hab=n_hab, site=site, cover=BCLCS_LV_4) %>%
mutate(case=1)
# Combine.
points <- bind_rows(used, avail)
# Winnow to final data set.
points <- points %>%
filter(n_hab >= 0) %>%
filter(cover %in% c('TC', 'TM', 'TB')) %>%
drop_na()
# Summary table.
roost.summary <- points %>% filter(case==1) %>% group_by(site) %>% summarise(n=n())
knitr::kable(roost.summary, caption = 'Number of roosts calculated per site in 2019', col.names=c('Site abbr.', 'N. roosts'))
library('lme4')
library('AICcmodavg')
n.points <- points
n.hab <- glmer(case ~ n_hab + (1|site), data=n.points, family=binomial(link='logit'))
f.hab <- glmer(case ~ f_hab + (1|site), data=n.points, family=binomial(link='logit'))
s.age <- glmer(case ~ age + (1|site), data=n.points, family=binomial(link='logit'))
s.basal <- glmer(case ~ basal.area + (1|site), data=n.points, family=binomial(link='logit'))
s.canopy <- glmer(case ~ canopy.closure + (1|site), data=n.points, family=binomial(link='logit'))
nb.canopy <- glmer(case ~ n_hab + canopy.closure + (1|site), data=n.points, family=binomial(link='logit'))
nb.age <- glmer(case ~ n_hab + age + (1|site), data=n.points, family=binomial(link='logit'))
nb.basal <- glmer(case ~ n_hab + basal.area + (1|site), data=n.points, family=binomial(link='logit'))
fb.canopy <- glmer(case ~ f_hab + canopy.closure + (1|site), data=n.points, family=binomial(link='logit'))
site <- glmer(case ~ 1 + (1|site), data=n.points, family=binomial(link='logit'))
models <- c(n.hab, f.hab, s.age, s.basal, s.canopy, nb.canopy, nb.age, nb.basal, fb.canopy)
modnames <- c('Nesting HSI', 'Foraging HSI', 'Age', 'Basal area', 'Canopy closure', 'Nesting HSI + canopy closure', 'Nesting HSI + age', 'Nesting HSI + basal area', 'Foraging HSI + canopy closure')
aics <- aictab(models, modnames=modnames)
r.nb.canopy <- r.squaredGLMM(nb.canopy)
library('MuMln')
library('MuMIn')
library('MuMIn')
aics <- aictab(models, modnames=modnames)
r.nb.canopy <- r.squaredGLMM(nb.canopy)
r.n.hab <- r.squaredGLMM(n.hab)
aics %>% dplyr::select(1:7) %>%
kable(col.names=c('Model', 'K', 'AIC~c~', '\u0394', 'AIC weight', 'Cum. AIC weights', 'log-likelihood'))
visreg(nb.canopy)
4+5
fitted(nb.canopy)
fitted(nb.canopy) %>%
plot()
nb.canopy
predicted <- predict(nb.canopy, type='response')
par(mfrow=c(2,2))
for(i in names(dat)){
plot(dat[,i],PredProb,xlab=i)
}
plot(n.points[,i],PredProb,xlab=i)
pr.can <- predict(nb.canopy, type='response', terms='canopy.closure')
pr.can <- predict(nb.canopy, type='terms', terms='canopy.closure')
pr.can <- predict(nb.canopy, type='response', terms='canopy.closure')
pr.can <- predict(nb.canopy, type='link', terms='canopy.closure')
pr.can <- predict(nb.canopy, type='response', terms='canopy.closure')
pr.can <- predict(nb.canopy, type='response', terms=c('canopy.closure', 'n.hab'))
pr.can <- predict.gml(nb.canopy, type='response', terms=c('canopy.closure', 'n.hab'))
pr.can <- predict.glm(nb.canopy, type='response', terms=c('canopy.closure', 'n.hab'))
pr.can <- predict.glm(nb.canopy, type='response', terms=canopy.closure)
pr.can <- predict.glm(nb.canopy, type='terms')
library('stats')
pr.can <- predict.glm(nb.canopy, type='terms')
pr.can <- predict(nb.canopy, newdata=n.points, type='terms')
mod_terms <- predict(mod, newdata = TestData, type = "terms")
mod_terms <- predict(nb.canopy, newdata = TestData, type = "terms")
mod_terms <- predict(nb.canopy, newdata = TestData, type = "link")
mod_terms <- predict(nb.canopy, newdata = n.points, type = "link")
mod_terms <- predict(nb.canopy, newdata = n.points, type = "response")
mod_terms <- predict(nb.canopy, newdata = n.points, type = "terms")
mod_terms <- predict.merMod(nb.canopy, newdata=n.points)
mod_terms <- predict.merMod(nb.canopy, newdata=n.points, random.only=TRUE, type='response')
4+5
install.packages('lme4')
install.packages('lme4')
# Load libraries
library('tidyverse')
library('lubridate')
library('knitr')
library('kableExtra')
sites <- read.csv('../h_data/raw/intensives.csv', stringsAsFactors=FALSE)
# Load in used and available points.
avail <- read.csv('../h_data/processed/available_utm.csv', stringsAsFactors=FALSE)
locs <- read.csv('../h_data/processed/used_2_attributes_2.csv', stringsAsFactors=FALSE)
# Clean up the messy datasets.
avail <- avail %>% dplyr::select(canopy.closure=CR_CLOSURE, basal.area=BASAL_AREA, age=PROJ_AGE_1, f_hab=f_hab, n_hab=n_hab, site=site, cover=BCLCS_LV_4) %>%
mutate(case=0)
used <- locs %>% dplyr::select(canopy.closure=CR_CLOSURE, basal.area=BASAL_AREA, age=PROJ_AGE_1, f_hab=f_hab, n_hab=n_hab, site=site, cover=BCLCS_LV_4) %>%
mutate(case=1)
# Combine.
points <- bind_rows(used, avail)
# Winnow to final data set.
points <- points %>%
filter(n_hab >= 0) %>%
filter(cover %in% c('TC', 'TM', 'TB')) %>%
drop_na()
# Summary table.
roost.summary <- points %>% filter(case==1) %>% group_by(site) %>% summarise(n=n())
knitr::kable(roost.summary, caption = 'Number of roosts calculated per site in 2019', col.names=c('Site abbr.', 'N. roosts'))
library('lme4')
library('AICcmodavg')
n.points <- points
n.hab <- glmer(case ~ n_hab + (1|site), data=n.points, family=binomial(link='logit'))
f.hab <- glmer(case ~ f_hab + (1|site), data=n.points, family=binomial(link='logit'))
s.age <- glmer(case ~ age + (1|site), data=n.points, family=binomial(link='logit'))
s.basal <- glmer(case ~ basal.area + (1|site), data=n.points, family=binomial(link='logit'))
s.canopy <- glmer(case ~ canopy.closure + (1|site), data=n.points, family=binomial(link='logit'))
nb.canopy <- glmer(case ~ n_hab + canopy.closure + (1|site), data=n.points, family=binomial(link='logit'))
nb.age <- glmer(case ~ n_hab + age + (1|site), data=n.points, family=binomial(link='logit'))
nb.basal <- glmer(case ~ n_hab + basal.area + (1|site), data=n.points, family=binomial(link='logit'))
fb.canopy <- glmer(case ~ f_hab + canopy.closure + (1|site), data=n.points, family=binomial(link='logit'))
site <- glmer(case ~ 1 + (1|site), data=n.points, family=binomial(link='logit'))
models <- c(n.hab, f.hab, s.age, s.basal, s.canopy, nb.canopy, nb.age, nb.basal, fb.canopy)
modnames <- c('Nesting HSI', 'Foraging HSI', 'Age', 'Basal area', 'Canopy closure', 'Nesting HSI + canopy closure', 'Nesting HSI + age', 'Nesting HSI + basal area', 'Foraging HSI + canopy closure')
library('MuMIn')
aics <- aictab(models, modnames=modnames)
r.nb.canopy <- r.squaredGLMM(nb.canopy)
r.n.hab <- r.squaredGLMM(n.hab)
aics %>% dplyr::select(1:7) %>%
kable(col.names=c('Model', 'K', 'AIC~c~', 'Delta AIC', 'AIC weight', 'Cum. AIC weights', 'log-likelihood'))
mod_terms <- predict(nb.canopy, newdata=n.points, type='terms')
mod_terms <- predict(nb.canopy, newdata=n.points, type='link')
predicted
mod_terms
