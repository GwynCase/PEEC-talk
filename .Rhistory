theme_classic() +
geom_boxplot()
ggplot(p.points, aes(x=cover, y=n_hab, fill=density)) +
theme_classic() +
geom_boxplot()
p.points %>% filter(cover=='')
p.points %>% filter(density=='LA')
# Load some libraries.
library('ggplot2')
library('tidyverse')
library('lme4')
# Read in the points.
points <- read.csv('../data/interim/points.csv', stringsAsFactors=FALSE)
p.points <- points %>%
filter(n_hab >= 0)
ggplot(p.points, aes(x=cover, y=n_hab, fill=density)) +
theme_classic() +
geom_boxplot()
# Load some libraries.
library('ggplot2')
library('tidyverse')
library('lme4')
# Read in the points.
points <- read.csv('../data/interim/points.csv', stringsAsFactors=FALSE)
p.points <- points %>%
filter(n_hab >= 0)
ggplot(p.points, aes(x=cover, y=n_hab, fill=density)) +
theme_classic() +
geom_boxplot()
p.points %>% filter(cover=='')
p.points <- p.points %>% filter(-cover=='')
p.points <- p.points %>% filter(!cover=='')
ggplot(p.points, aes(x=cover, y=n_hab, fill=density)) +
theme_classic() +
geom_boxplot()
p.points %>% mutate(density=case_when(
density=='RZ' ~ 'NL',
density=='UR' ~ 'NL',
TRUE ~ density
))
p.points <- p.points %>% mutate(density=case_when(
density=='RZ' ~ 'NL',
density=='UR' ~ 'NL',
TRUE ~ density
))
ggplot(p.points, aes(x=cover, y=n_hab, fill=density)) +
theme_classic() +
geom_boxplot()
p.points %>% filter(cover=='TM')
p.points %>% filter(cover=='TM' & density=='OP')
p.points %>% filter(cover=='TM') %>%
filter(density=='OP')
ggplot(p.points, aes(x=cover, y=n_hab)) +
theme_classic() +
geom_boxplot()
View(p.points)
p.points %>% mutate(age=scale(age))
p.points %>% mutate(canopy.closure=scale(canopy.closure), basal.area=scale(basal.area), live.stems=scale(live.stems), v.comp=scale(v.comp), dom.sp.per=scale(dom.sp.per), age=scale(age), height=scale(height))
s.points <- p.points %>% mutate(canopy.closure=scale(canopy.closure), basal.area=scale(basal.area), live.stems=scale(live.stems), v.comp=scale(v.comp), dom.sp.per=scale(dom.sp.per), age=scale(age), height=scale(height))
p.points <- p.points %>% mutate(density=case_when(
density=='RZ' ~ 'NL',
density=='UR' ~ 'NL',
TRUE ~ density
))
# And then scale the numeric variables.
s.points <- p.points %>% mutate(canopy.closure=scale(canopy.closure), basal.area=scale(basal.area), live.stems=scale(live.stems), v.comp=scale(v.comp), dom.sp.per=scale(dom.sp.per), age=scale(age), height=scale(height))
library('lme4')
sink.corr <- glmer(case ~ canopy.closure + basal.area + density + (1|site), data=points, family=binomial(link='logit'))
sink.corr <- glmer(case ~ canopy.closure + basal.area + density + (1|site), data=s.points, family=binomial(link='logit'))
summary(sink.corr)
map(p.points, ~sum(is.na(.)))
p.points %>% filter (height=='NA')
View(p.points)
p.points %>% filter (height=='')
p.points %>% filter(is.na())
is.na(p.points$height)
which(is.na(p.points$height))
p.points %>% filter(height==NA)
map(p.points, ~sum(is.na(.)))
p.points %>% filter(age==NA)
p.points %>% filter(v.comp==4)
p.points %>% filter(v.comp==NA)
p.points %>% filter(v.comp=='NA')
p.points %>% filter(v.comp=='')
p.points %>% filter(v.comp==' ')
p.points %>% filter(v.comp==0)
is.na(p.points)
which(is.na(p.points))
which(is.na(p.points$age))
p.points[ , which(is.na(p.points$age))]
p.points[which(is.na(p.points$age), )]
p.points[which(is.na(p.points$age)), ]
p.points[which(is.na(p.points$live.stems)), ]
p.points[which(is.na(p.points$live.stems)), ]
s.points %>%
drop_na(age)
5+4
gf
)
full.set <- s.points %>%
drop_na(age)
map(p.points, ~sum(is.na(.)))
map(full.set, ~sum(is.na(.)))
full.set %>% filter(v.comp=='')
full.set %>% filter(v.comp==NA)
full.set %>% filter(v.comp==<0)
full.set %>% filter(v.comp <0)
full.set <- p.points %>%
drop_na(age)
full.set %>% filter(v.comp <0)
full.set %>% group_by(v.comp)
full.set[which(is.na(full.set$v.comp)), ]
map(full.set, ~sum(is.na(.)))
full.set %>% filter(cover %in% c('TC', 'TM', 'TB')
)
full.set %>% filter(cover %in% c('TC', 'TM', 'TB')) %>%
drop_na(v.comp)
full.set %>% filter(cover %in% c('TC', 'TM', 'TB')) %>%
is.na(v.comp)
full.set %>% filter(cover %in% c('TC', 'TM', 'TB')) %>%
filter(is.na(v.comp))
full.set %>% filter(!cover %in% c('TC', 'TM', 'TB'))
full.set %>% filter(!cover %in% c('TC', 'TM', 'TB')) %>%
filter(is.na(v.comp))
full.set %>% filter(!cover %in% c('TC', 'TM', 'TB') & is.na(v.comp))
full.set %>% mutate(case_when(
!cover %in% c('TC', 'TM', 'TB') & is.na(v.comp) ~ 0,
TRUE ~ v.comp
))
full.set %>% mutate(v.comp=case_when(
!cover %in% c('TC', 'TM', 'TB') & is.na(v.comp) ~ 0,
TRUE ~ v.comp
))
class(full.set$v.comp)
full.set$v.comp <- as.numeric(full.set$v.comp)
full.set %>% mutate(v.comp=case_when(
!cover %in% c('TC', 'TM', 'TB') & is.na(v.comp) ~ 0,
TRUE ~ v.comp
))
full.set %>% filter(!cover %in% c('TC', 'TM', 'TB'))
full.set %>% filter(!cover %in% c('TC', 'TM', 'TB') & is.na(v.comp))
full.set <- full.set %>% mutate(v.comp=case_when(
!cover %in% c('TC', 'TM', 'TB') & is.na(v.comp) ~ 0,
TRUE ~ v.comp
))
full.set %>% filter(!cover %in% c('TC', 'TM', 'TB') & is.na(v.comp))
full.set %>% filter(!cover %in% c('TC', 'TM', 'TB'))
f.points <- s.points %>% filter(cover %in% c('TC', 'TM', 'TB'))
map(f.points, ~sum(is.na(.)))
f.points <- s.points %>% filter(cover %in% c('TC', 'TM', 'TB')) %>%
drop_na()
f.points %>% group_by(case) %>%
summarize(n())
f.points <- s.points %>% filter(cover %in% c('TC', 'TM', 'TB')) %>%
drop_na()
f.points %>% group_by(case) %>%
summarize(n())
# "Boost" models.
b.basal <- glmer(case ~ n_hab + basal.area + (1|site), data=f.points, family=binomial(link='logit'))
b.canopy <- glmer(case ~ n_hab + canopy.closure (1|site), data=f.points, family=binomial(link='logit'))
b.canopy <- glmer(case ~ n_hab + canopy.closure + (1|site), data=f.points, family=binomial(link='logit'))
b.comp <- glmer(case ~ n_hab + v.comp + (1|site), data=f.points, family=binomial(link='logit'))
# "Solo" models
s.basal <- glmer(case ~ basal.area + (1|site), data=f.points, family=binomial(link='logit'))
s.canopy <- glmer(case ~ canopy.closure (1|site), data=f.points, family=binomial(link='logit'))
s.canopy <- glmer(case ~ canopy.closure + (1|site), data=f.points, family=binomial(link='logit'))
s.comp <- glmer(case ~ v.comp + (1|site), data=f.points, family=binomial(link='logit'))
# Check what pops out.
AIC(b.basal, b.canopy, b.comp, s.basal, s.canopy, s.comp)
f.hab <- glmer(case ~ f_hab + (1|site), data=f.points, family=binomial(link='logit'))
# And of course habitat models.
n.hab <- glmer(case ~ n_hab + (1|site), data=f.points, family=binomial(link='logit'))
# Check what pops out.
AIC(b.basal, b.canopy, b.comp, s.basal, s.canopy, s.comp, n.hab, f.hab)
# Check what pops out.
aic <- AIC(b.basal, b.canopy, b.comp, s.basal, s.canopy, s.comp, n.hab, f.hab)
aic %>% arrange()
aic %>% arrange(AIC)
View(aic)
aic %>% arrange(AIC)
aic
class(aic)
aic %>% rownames_to_column()
aic %>% rownames_to_column() %>%
arrange(AIC)
aic %>% rownames_to_column() %>%
arrange(AIC)
# Load some libraries.
library('ggplot2')
library('tidyverse')
library('lme4')
# Read in the points.
points <- read.csv('../data/interim/points.csv', stringsAsFactors=FALSE)
p.points <- points %>%
filter(n_hab >= 0)
ggplot(p.points, aes(x=cover, y=n_hab, fill=density)) +
theme_classic() +
geom_boxplot()
p.points %>% filter(cover=='')
p.points <- p.points %>% filter(!cover=='')
p.points <- p.points %>% mutate(density=case_when(
density=='RZ' ~ 'NL',
density=='UR' ~ 'NL',
TRUE ~ density
))
# And then scale the numeric variables.
s.points <- p.points %>% mutate(canopy.closure=scale(canopy.closure), basal.area=scale(basal.area), live.stems=scale(live.stems), v.comp=scale(v.comp), dom.sp.per=scale(dom.sp.per), age=scale(age), height=scale(height))
sink.corr <- glmer(case ~ canopy.closure + basal.area + density + (1|site), data=s.points, family=binomial(link='logit'))
map(p.points, ~sum(is.na(.)))
p.points[which(is.na(p.points$live.stems)), ]
f.points <- s.points %>% filter(cover %in% c('TC', 'TM', 'TB')) %>%
drop_na()
f.points %>% group_by(case) %>%
summarize(n())
# "Boost" models.
b.basal <- glmer(case ~ n_hab + basal.area + (1|site), data=f.points, family=binomial(link='logit'))
b.canopy <- glmer(case ~ n_hab + canopy.closure + (1|site), data=f.points, family=binomial(link='logit'))
b.comp <- glmer(case ~ n_hab + v.comp + (1|site), data=f.points, family=binomial(link='logit'))
# "Solo" models.
s.basal <- glmer(case ~ basal.area + (1|site), data=f.points, family=binomial(link='logit'))
s.canopy <- glmer(case ~ canopy.closure + (1|site), data=f.points, family=binomial(link='logit'))
s.comp <- glmer(case ~ v.comp + (1|site), data=f.points, family=binomial(link='logit'))
# And of course habitat models.
n.hab <- glmer(case ~ n_hab + (1|site), data=f.points, family=binomial(link='logit'))
f.hab <- glmer(case ~ f_hab + (1|site), data=f.points, family=binomial(link='logit'))
# Check what pops out.
aic <- AIC(b.basal, b.canopy, b.comp, s.basal, s.canopy, s.comp, n.hab, f.hab)
aic %>% rownames_to_column() %>%
arrange(AIC)
# Load in data and fix it up.
ch.points <- points %>%
filter(n_hab >= 0) %>%
filter(!cover=='') %>%
mutate(density=case_when(
density=='RZ' ~ 'NL',
density=='UR' ~ 'NL',
TRUE ~ density
))
# Finally scale the variables
ch.points <- ch.points %>% mutate(canopy.closure=scale(canopy.closure), basal.area=scale(basal.area), live.stems=scale(live.stems), v.comp=scale(v.comp), dom.sp.per=scale(dom.sp.per), age=scale(age), height=scale(height))
all_equal(ch.points, s.points)
ggplot(p.points, (aes(x=live.stems))) +
geom_histogram()
# Do all the transformations as last time.
p.points <- points %>%
filter(n_hab >= 0) %>%
filter(!cover=='') %>%
mutate(density=case_when(
density=='RZ' ~ 'NL',
density=='UR' ~ 'NL',
TRUE ~ density
))
map(p.points, ~sum(is.na(.)))
# Do all the transformations as last time.
f.points <- points %>%
filter(n_hab >= 0) %>%
filter(!cover=='') %>%
mutate(density=case_when(
density=='RZ' ~ 'NL',
density=='UR' ~ 'NL',
TRUE ~ density
)) %>%
filter(cover %in% c('TC', 'TM', 'TB'))
map(f.points, ~sum(is.na(.)))
# Load some libraries.
library('ggplot2')
library('tidyverse')
library('lme4')
# Read in the points.
points <- read.csv('../data/interim/points.csv', stringsAsFactors=FALSE)
# Do all the transformations as last time.
f.points <- points %>%
filter(n_hab >= 0) %>%
filter(!cover=='') %>%
mutate(density=case_when(
density=='RZ' ~ 'NL',
density=='UR' ~ 'NL',
TRUE ~ density
)) %>%
filter(cover %in% c('TC', 'TM', 'TB'))
map(f.points, ~sum(is.na(.)))
install.packages("BaylorEdPsych")
library('BaylorEdPsych')
LittleMCAR(f.points)
install.packages('mvnmle')
LittleMCAR(f.points)
View(f.points)
f.point %>% select(7:15)
f.points %>% select(7:15)
f.points %>% select(7:15) %>%
LittleMCAR()
missing <- f.points %>% select(7:15) %>%
LittleMCAR()
View(missing)
missing$chi.square
missing$p.value
missing$missing.patterns
missing$amount.missing
n.points <- f.points %>%
drop_na()
library('BaylorEdPsych')
# Requires mvnmle to be installed
missing <- f.points %>% select(7:15) %>%
LittleMCAR()
missing$chi.square
missing$p.value
missing$amount.missing
shapiro.test(f.points$age)
shapiro.test(f.points$height)
shapiro.test(n.points$height)
mean(f.points$age)
mean(n.points$age)
sd(f.points$age)
sd(n.points$age)
f.points <- f.points %>% mutate(canopy.closure=scale(canopy.closure), basal.area=scale(basal.area), live.stems=scale(live.stems), v.comp=scale(v.comp), dom.sp.per=scale(dom.sp.per), age=scale(age), height=scale(height))
# Make a second set with all the NAs dropped.
n.points <- f.points %>%
drop_na()
shapiro.test(f.points$age)
shapiro.test(f.points$height)
shapiro.test(f.points$canopy closure)
shapiro.test(f.points$canopy.closure)
shapiro.test(f.points$v.comp)
View(f.points)
plot(f.points$age)
# Do all the transformations as last time.
f.points <- points %>%
filter(n_hab >= 0) %>%
filter(!cover=='') %>%
mutate(density=case_when(
density=='RZ' ~ 'NL',
density=='UR' ~ 'NL',
TRUE ~ density
)) %>%
filter(cover %in% c('TC', 'TM', 'TB'))
n.points <- f.points %>%
drop_na()
wilcox.test(f.points$age, n.points$age)
wilcox.test(f.points$n_hab, n.points$n_hab)
wilcox.test(f.points$canopy.closure, n.points$canopy.closure)
wilcox.test(f.points$basal.area, n.points$basal.area)
wilcox.test(f.points$v.comp, n.points$v.comp)
f.points <- f.points %>%
dplyr::select(!v.comp)
f.points <- f.points %>%
dplyr::select(-v.comp)
n.points <- f.points %>%
drop_na()
f.points <- f.points %>%
dplyr::select(-v.comp)
View(f.points)
n.points <- f.points %>%
drop_na()
wilcox.test(f.points$n_hab, n.points$n_hab)
wilcox.test(f.points$canopy.closure, n.points$canopy.closure)
wilcox.test(f.points$basal.area, n.points$basal.area)
wilcox.test(f.points$age, n.points$age)
wilcox.test(f.points$n_hab, n.points$n_hab)
wilcox.test(f.points$canopy.closure, n.points$canopy.closure)
wilcox.test(f.points$basal.area, n.points$basal.area)
wilcox.test(f.points$age, n.points$age)
wilcox.test(f.points$age, n.points$height)
# "Boost" models.
b.basal <- glmer(case ~ n_hab + basal.area + (1|site), data=n.points, family=binomial(link='logit'))
b.canopy <- glmer(case ~ n_hab + canopy.closure + (1|site), data=n.points, family=binomial(link='logit'))
# "Solo" models.
s.basal <- glmer(case ~ basal.area + (1|site), data=n.points, family=binomial(link='logit'))
s.canopy <- glmer(case ~ canopy.closure + (1|site), data=n.points, family=binomial(link='logit'))
s.age <- glmer(case ~ age + (1|site), data=f.points, family=binomial(link='logit'))
# And of course habitat models.
n.hab <- glmer(case ~ n_hab + (1|site), data=n.points, family=binomial(link='logit'))
f.hab <- glmer(case ~ f_hab + (1|site), data=n.points, family=binomial(link='logit'))
# And one novel one.
can.age <- glmer(case ~ age + canopy.closure + (1|site), data=n.points, family=binomial(link='logit'))
# Check what pops out.
aic <- AIC(b.basal, b.canopy, b.comp, s.basal, s.canopy, s.comp, n.hab, f.hab)
aic %>% rownames_to_column() %>%
arrange(AIC)
4+5
# Load some libraries.
library('ggplot2')
library('tidyverse')
library('lme4')
# Read in the points.
points <- read.csv('../data/interim/points.csv', stringsAsFactors=FALSE)
# Do all the transformations as last time.
f.points <- points %>%
filter(n_hab >= 0) %>%
filter(!cover=='') %>%
mutate(density=case_when(
density=='RZ' ~ 'NL',
density=='UR' ~ 'NL',
TRUE ~ density
)) %>%
filter(cover %in% c('TC', 'TM', 'TB'))
map(f.points, ~sum(is.na(.)))
library('BaylorEdPsych')
# Requires mvnmle to be installed
missing <- f.points %>% select(7:15) %>%
LittleMCAR()
missing$chi.square
missing$p.value
missing$amount.missing
# Make the second data set, without NAs
n.points <- f.points %>%
drop_na()
# Just a quick run...
wilcox.test(f.points$age, n.points$age)
wilcox.test(f.points$n_hab, n.points$n_hab)
wilcox.test(f.points$canopy.closure, n.points$canopy.closure)
wilcox.test(f.points$basal.area, n.points$basal.area)
f.points <- f.points %>%
dplyr::select(-v.comp)
n.points <- f.points %>%
drop_na()
wilcox.test(f.points$n_hab, n.points$n_hab)
wilcox.test(f.points$canopy.closure, n.points$canopy.closure)
wilcox.test(f.points$basal.area, n.points$basal.area)
wilcox.test(f.points$age, n.points$age)
wilcox.test(f.points$age, n.points$height)
# "Boost" models.
b.basal <- glmer(case ~ n_hab + basal.area + (1|site), data=n.points, family=binomial(link='logit'))
b.canopy <- glmer(case ~ n_hab + canopy.closure + (1|site), data=n.points, family=binomial(link='logit'))
# "Solo" models.
s.basal <- glmer(case ~ basal.area + (1|site), data=n.points, family=binomial(link='logit'))
s.canopy <- glmer(case ~ canopy.closure + (1|site), data=n.points, family=binomial(link='logit'))
s.age <- glmer(case ~ age + (1|site), data=f.points, family=binomial(link='logit'))
# And of course habitat models.
n.hab <- glmer(case ~ n_hab + (1|site), data=n.points, family=binomial(link='logit'))
f.hab <- glmer(case ~ f_hab + (1|site), data=n.points, family=binomial(link='logit'))
# And one novel one.
can.age <- glmer(case ~ age + canopy.closure + (1|site), data=n.points, family=binomial(link='logit'))
# Check what pops out.
aic <- AIC(b.basal, b.canopy, b.comp, s.basal, s.canopy, s.comp, n.hab, f.hab)
# "Boost" models.
b.basal <- glmer(case ~ n_hab + basal.area + (1|site), data=n.points, family=binomial(link='logit'))
b.canopy <- glmer(case ~ n_hab + canopy.closure + (1|site), data=n.points, family=binomial(link='logit'))
# "Solo" models.
s.basal <- glmer(case ~ basal.area + (1|site), data=n.points, family=binomial(link='logit'))
s.canopy <- glmer(case ~ canopy.closure + (1|site), data=n.points, family=binomial(link='logit'))
s.age <- glmer(case ~ age + (1|site), data=f.points, family=binomial(link='logit'))
# And of course habitat models.
n.hab <- glmer(case ~ n_hab + (1|site), data=n.points, family=binomial(link='logit'))
f.hab <- glmer(case ~ f_hab + (1|site), data=n.points, family=binomial(link='logit'))
# And one novel one.
can.age <- glmer(case ~ age + canopy.closure + (1|site), data=n.points, family=binomial(link='logit'))
# Check what pops out.
aic <- AIC(b.basal, b.canopy, s.basal, s.canopy, s.age, n.hab, f.hab, can.age)
aic %>% rownames_to_column() %>%
arrange(AIC)
# Load some libraries.
library('ggplot2')
library('tidyverse')
library('lme4')
# Read in the points.
points <- read.csv('../data/interim/points.csv', stringsAsFactors=FALSE)
# Do all the transformations as last time.
f.points <- points %>%
filter(n_hab >= 0) %>%
filter(!cover=='') %>%
mutate(density=case_when(
density=='RZ' ~ 'NL',
density=='UR' ~ 'NL',
TRUE ~ density
)) %>%
filter(cover %in% c('TC', 'TM', 'TB'))
f.points <- f.points %>%
dplyr::select(-v.comp)
n.points <- f.points %>%
drop_na()
# "Boost" models.
b.basal <- glmer(case ~ n_hab + basal.area + (1|site), data=n.points, family=binomial(link='logit'))
# "Boost" models.
b.basal <- glmer(case ~ n_hab + basal.area + (1|site), data=n.points, family=binomial(link='logit'))
b.canopy <- glmer(case ~ n_hab + canopy.closure + (1|site), data=n.points, family=binomial(link='logit'))
# "Solo" models.
s.basal <- glmer(case ~ basal.area + (1|site), data=n.points, family=binomial(link='logit'))
s.canopy <- glmer(case ~ canopy.closure + (1|site), data=n.points, family=binomial(link='logit'))
s.age <- glmer(case ~ age + (1|site), data=f.points, family=binomial(link='logit'))
# And of course habitat models.
n.hab <- glmer(case ~ n_hab + (1|site), data=n.points, family=binomial(link='logit'))
f.hab <- glmer(case ~ f_hab + (1|site), data=n.points, family=binomial(link='logit'))
# And one novel one.
can.age <- glmer(case ~ age + canopy.closure + (1|site), data=n.points, family=binomial(link='logit'))
# Check what pops out.
aic <- AIC(b.basal, b.canopy, s.basal, s.canopy, s.age, n.hab, f.hab, can.age)
aic %>% rownames_to_column() %>%
arrange(AIC)
View(n.points)
n.points %>% mutate(m.basal=basal.area/live.stems)
# Scale basal area by number of trees.
n.points <- n.points %>% mutate(m.basal=basal.area/live.stems)
# New models.
b.mbase <- glmer(case ~ n_hab + m.basal + (1|site), data=n.points, family=binomial(link='logit'))
# Scale basal area by number of trees.
n.points <- n.points %>% mutate(m.basal=basal.area/live.stems)
# New models.
b.mbase <- glmer(case ~ n_hab + m.basal + (1|site), data=n.points, family=binomial(link='logit'))
s.mbase <- glmer(case ~ m.basal + (1|site), data=n.points, family=binomial(link='logit'))
fb.canopy <- glmer(case ~ f_hab + canopy.closure + (1|site), data=n.points, family=binomial(link='logit'))
aic <- AIC(b.basal, b.canopy, s.basal, s.canopy, s.age, n.hab, f.hab, can.age, b.mbase, s.mbase, fb.canopy)
aic %>% rownames_to_column() %>%
arrange(AIC)
# Scale basal area by number of trees.
n.points <- n.points %>% mutate(m.basal=basal.area/live.stems)
# New models.
b.mbase <- glmer(case ~ n_hab + m.basal + (1|site), data=n.points, family=binomial(link='logit'))
s.mbase <- glmer(case ~ m.basal + (1|site), data=n.points, family=binomial(link='logit'))
fb.canopy <- glmer(case ~ f_hab + canopy.closure + (1|site), data=n.points, family=binomial(link='logit'))
aic <- AIC(b.basal, b.canopy, s.basal, s.canopy, s.age, n.hab, f.hab, can.age, b.mbase, s.mbase, fb.canopy)
aic %>% rownames_to_column() %>%
arrange(AIC)
