filter(treed == 'T')
# Convert to data frame and do some cleaning.
vri.df <- as.data.frame(vri) %>%
dplyr::select(treed=BCLCS_LV_2, cover.type=BCLCS_LV_4,
density=BCLCS_LV_5, age1=PROJ_AGE_1,
age2=PROJ_AGE_2, v.complexity=VERT_COMPL,
crown.closure=CR_CLOSURE, live.stems=LIVE_STEMS,
basal.area=BASAL_AREA) %>%
mutate(live.stems=as.numeric(live.stems)) %>%
mutate(m.tr.area=basal.area/live.stems, m.age=mean(age1, age2))
# Assume NOGO only roost in forest.
vri.forest <- vri.df %>%
filter(treed == 'T')
vri.df$age1[1]
# Convert to data frame and do some cleaning.
vri.df <- as.data.frame(vri) %>%
dplyr::select(treed=BCLCS_LV_2, cover.type=BCLCS_LV_4,
density=BCLCS_LV_5, age1=PROJ_AGE_1,
age2=PROJ_AGE_2, v.complexity=VERT_COMPL,
crown.closure=CR_CLOSURE, live.stems=LIVE_STEMS,
basal.area=BASAL_AREA) %>%
mutate(live.stems=as.numeric(live.stems), age1=as.numeric(age1),
age2=as.numeric(age2)) %>%
mutate(m.tr.area=basal.area/live.stems, m.age=mean(age1, age2))
# Convert to data frame and do some cleaning.
vri.df <- as.data.frame(vri) %>%
dplyr::select(treed=BCLCS_LV_2, cover.type=BCLCS_LV_4,
density=BCLCS_LV_5, age1=PROJ_AGE_1,
age2=PROJ_AGE_2, v.complexity=VERT_COMPL,
crown.closure=CR_CLOSURE, live.stems=LIVE_STEMS,
basal.area=BASAL_AREA) %>%
mutate(live.stems=as.numeric(live.stems), age1=as.numeric(age1),
age2=as.numeric(age2))
View(vri.df)
vri.df$age1[1]
vri.df$age2[1]
mean(vri.df$age1[1], vri.df$age2[1])
vri.forest %>%
select(., 1:3))
vri.forest %>%
dplyr::select(., 1:3))
vri.forest %>%
dplyr::select(., 1:3)
vri.forest %>%
dplyr::select(age1, age2)
vri.forest %>%
mutate(m.age=rowMeans(select(age1, age2)))
# Convert to data frame and do some cleaning.
vri.df <- as.data.frame(vri) %>%
dplyr::select(treed=BCLCS_LV_2, cover.type=BCLCS_LV_4,
density=BCLCS_LV_5, age1=PROJ_AGE_1,
age2=PROJ_AGE_2, v.complexity=VERT_COMPL,
crown.closure=CR_CLOSURE, live.stems=LIVE_STEMS,
basal.area=BASAL_AREA) %>%
mutate(live.stems=as.numeric(live.stems), age1=as.numeric(age1),
age2=as.numeric(age2))
# Assume NOGO only roost in forest.
vri.forest <- vri.df %>%
filter(treed == 'T')
vri.forest %>%
dplyr::select(age1, age2)
vri.forest %>%
mutate(m.age=rowMeans(select(age1, age2)))
vri.forest %>%
mutate(m.age=rowMeans(dplyr::select(age1, age2)))
vri.forest %>%
mutate(m.age=rowMeans(dplyr::select(., 4:5)))
# Convert to data frame and do some cleaning.
vri.df <- as.data.frame(vri) %>%
dplyr::select(treed=BCLCS_LV_2, cover.type=BCLCS_LV_4,
density=BCLCS_LV_5, age1=PROJ_AGE_1,
age2=PROJ_AGE_2, v.complexity=VERT_COMPL,
crown.closure=CR_CLOSURE, live.stems=LIVE_STEMS,
basal.area=BASAL_AREA) %>%
mutate(live.stems=as.numeric(live.stems), age1=as.numeric(age1),
age2=as.numeric(age2)) %>%
mutate(m.tr.area=basal.area/live.stems,
m.age=rowMeans(dplyr::select(., 4:5)))
# Assume NOGO only roost in forest.
vri.forest <- vri.df %>%
filter(treed == 'T')
# Convert to data frame and do some cleaning.
vri.df <- as.data.frame(vri) %>%
dplyr::select(treed=BCLCS_LV_2, cover.type=BCLCS_LV_4,
density=BCLCS_LV_5, age1=PROJ_AGE_1,
age2=PROJ_AGE_2, v.complexity=VERT_COMPL,
crown.closure=CR_CLOSURE, live.stems=LIVE_STEMS,
basal.area=BASAL_AREA) %>%
mutate(live.stems=as.numeric(live.stems), age1=as.numeric(age1),
age2=as.numeric(age2))
# Assume NOGO only roost in forest.
vri.forest <- vri.df %>%
filter(treed == 'T') %>%
mutate(m.tr.area=basal.area/live.stems,
m.age=rowMeans(dplyr::select(., 4:5))) %>%
mutate(m.age=case_when(is.na(m.age) ~ as.numeric(age1),
TRUE ~ as.numeric(m.age)))
c <- ska.random %>% dplyr::select(age1, age2, m.age, v.complexity,
crown.closure, live.stems, basal.area,
m.tree.area) %>%
cor(use='pairwise')
c <- vri.forest %>% dplyr::select(age1, age2, m.age, v.complexity,
crown.closure, live.stems, basal.area,
m.tree.area) %>%
cor(use='pairwise')
c <- vri.forest %>% dplyr::select(age1, age2, m.age, v.complexity,
crown.closure, live.stems, basal.area,
m.tr.area) %>%
cor(use='pairwise')
c <- vri.forest %>% dplyr::select(age1, age2, m.age, v.complexity,
crown.closure, live.stems, basal.area,
m.tr.area) %>%
mutate_if(is.factor, as.numeric) %>%
cor(use='pairwise')
fc <- vri.forest %>% dplyr::select(age1, age2, m.age, v.complexity,
crown.closure, live.stems, basal.area,
m.tr.area) %>%
mutate_if(is.factor, as.numeric) %>%
cor(use='pairwise')
# cor() is base R but corrplot makes visualization nicer.
library('corrplot')
c <- ska.random %>% dplyr::select(age, v.complexity, crown.closure, live.stems, basal.area, m.tree.area) %>%
cor(use='pairwise')
corrplot(c, method='color', order='hclust')
corrplot(fc, method='color', order='hclust')
fc <- vri.forest %>% dplyr::select(age1, age2, m.age, v.complexity,
crown.closure, live.stems, basal.area,
m.tr.area) %>%
mutate_if(is.factor, as.numeric) %>%
cor(use='pairwise')
corrplot(fc, method='color', order='hclust')
fc <- vri.forest %>% dplyr::select(age1, age2, m.age, v.complexity,
crown.closure, live.stems, basal.area,
m.tr.area) %>%
mutate_if(is.factor, as.numeric) %>%
cor(use='pairwise')
corrplot(fc, method='color', order='hclust')
as.data.frame(vri)
vri.df2 <- as.data.frame(vri)
View(vri.df2)
# Convert to data frame and do some cleaning.
vri.df2 <- as.data.frame(vri) %>%
dplyr::select(treed=BCLCS_LV_2, cover.type=BCLCS_LV_4,
density=BCLCS_LV_5, age1=PROJ_AGE_1,
height=PROJ_HT_1, v.complexity=VERT_COMPL,
crown.closure=CR_CLOSURE, live.stems=LIVE_STEMS,
basal.area=BASAL_AREA)
# Assume NOGO only roost in forest.
vri.forest <- vri.df %>%
filter(treed == 'T') %>%
mutate_if(is.factor, as.numeric) %>%
mutate(m.tr.area=basal.area/live.stems)
# Assume NOGO only roost in forest.
vri.forest2 <- vri.df2 %>%
filter(treed == 'T') %>%
mutate_if(is.factor, as.numeric) %>%
mutate(m.tr.area=basal.area/live.stems)
fc2 <- vri.forest2 %>% dplyr::select(age1, height, v.complexity,
crown.closure, live.stems, basal.area,
m.tr.area) %>%
cor(use='pairwise')
corrplot(fc2, method='color', order='hclust')
# Convert to data frame and do some cleaning.
vri.df2 <- as.data.frame(vri) %>%
dplyr::select(treed=BCLCS_LV_2, cover.type=BCLCS_LV_4,
density=BCLCS_LV_5, age1=PROJ_AGE_1,
height=PROJ_HT_1, v.complexity=VERT_COMPL,
crown.closure=CR_CLOSURE, live.stems=LIVE_STEMS,
basal.area=BASAL_AREA)
# Assume NOGO only roost in forest.
vri.forest2 <- vri.df2 %>%
filter(treed == 'T') %>%
mutate_if(is.factor, as.numeric) %>%
mutate(m.tr.area=basal.area/live.stems)
fc2 <- vri.forest2 %>% dplyr::select(age1, height, v.complexity,
crown.closure, live.stems, basal.area,
m.tr.area) %>%
cor(use='pairwise')
corrplot(fc2, method='color', order='hclust')
# Convert to data frame and do some cleaning.
vri.df2 <- as.data.frame(vri) %>%
dplyr::select(treed=BCLCS_LV_2, cover.type=BCLCS_LV_4,
density=BCLCS_LV_5, age1=PROJ_AGE_1,
height=PROJ_HT_1, v.complexity=VERT_COMPL,
crown.closure=CR_CLOSURE, live.stems=LIVE_STEMS,
basal.area=BASAL_AREA)
# Assume NOGO only roost in forest.
vri.forest2 <- vri.df2 %>%
filter(treed == 'T') %>%
mutate_if(is.factor, as.numeric) %>%
mutate(m.tr.area=basal.area/live.stems)
fc2 <- vri.forest2 %>% dplyr::select(age1, height, v.complexity,
crown.closure, live.stems, basal.area,
m.tr.area) %>%
cor(use='pairwise')
corrplot(fc2, method='color', order='hclust')
# Load some libraries.
library('ggplot2')
library('tidyverse')
# Import random points.
ska.random <- read.csv('../data/processed/ska_random_variables.csv', stringsAsFactors=FALSE)
ggplot(ska.random, aes(x=xcoord, y=ycoord)) +
geom_point() +
theme_void()
ska.random <- ska.random %>%
mutate(M_TR_AREA=BASAL_AREA/LIVE_STEMS) %>%
rename(lat=ycoord, lon=xcoord, age=PROJ_AGE_1, v.complexity=VERT_COMPL, crown.closure=CR_CLOSURE, live.stems=LIVE_STEMS,        basal.area=BASAL_AREA, cover.type=BCLCS_LV_4, m.tree.area=M_TR_AREA)
ska.random %>% distinct(cover.type)
ska.random <- ska.random %>% mutate(cover.type=case_when(
cover.type == 'TC' ~ 'conifer',
cover.type == 'TM' ~ 'mixed forest',
cover.type == 'TB' ~ 'deciduous',
cover.type == 'SL' ~ 'low shrub'
))
# cor() is base R but corrplot makes visualization nicer.
library('corrplot')
c <- ska.random %>% dplyr::select(age, v.complexity, crown.closure, live.stems, basal.area, m.tree.area) %>%
cor(use='pairwise')
corrplot(c, method='color', order='hclust')
library('rgdal')
# Import the VRI data.
vri <- readOGR('../data/external/ska_vri.shp')
# Convert to data frame and do some cleaning.
vri.df <- as.data.frame(vri) %>%
dplyr::select(treed=BCLCS_LV_2, cover.type=BCLCS_LV_4,
density=BCLCS_LV_5, age1=PROJ_AGE_1,
age2=PROJ_AGE_2, v.complexity=VERT_COMPL,
crown.closure=CR_CLOSURE, live.stems=LIVE_STEMS,
basal.area=BASAL_AREA) %>%
mutate(live.stems=as.numeric(live.stems), age1=as.numeric(age1),
age2=as.numeric(age2))
# Assume NOGO only roost in forest.
vri.forest <- vri.df %>%
filter(treed == 'T') %>%
mutate(m.tr.area=basal.area/live.stems,
m.age=rowMeans(dplyr::select(., 4:5))) %>%
mutate(m.age=case_when(is.na(m.age) ~ as.numeric(age1),
TRUE ~ as.numeric(m.age)))
fc <- vri.forest %>% dplyr::select(age1, age2, m.age, v.complexity,
crown.closure, live.stems, basal.area,
m.tr.area) %>%
mutate_if(is.factor, as.numeric) %>%
cor(use='pairwise')
corrplot(fc, method='color', order='hclust', addCoef.col='black')
# Load some libraries.
library('ggplot2')
library('tidyverse')
# Import random points.
ska.random <- read.csv('../data/processed/ska_random_variables.csv', stringsAsFactors=FALSE)
ggplot(ska.random, aes(x=xcoord, y=ycoord)) +
geom_point() +
theme_void()
ska.random <- ska.random %>%
mutate(M_TR_AREA=BASAL_AREA/LIVE_STEMS) %>%
rename(lat=ycoord, lon=xcoord, age=PROJ_AGE_1, v.complexity=VERT_COMPL, crown.closure=CR_CLOSURE, live.stems=LIVE_STEMS,        basal.area=BASAL_AREA, cover.type=BCLCS_LV_4, m.tree.area=M_TR_AREA)
ska.random %>% distinct(cover.type)
ska.random <- ska.random %>% mutate(cover.type=case_when(
cover.type == 'TC' ~ 'conifer',
cover.type == 'TM' ~ 'mixed forest',
cover.type == 'TB' ~ 'deciduous',
cover.type == 'SL' ~ 'low shrub'
))
# cor() is base R but corrplot makes visualization nicer.
library('corrplot')
c <- ska.random %>% dplyr::select(age, v.complexity, crown.closure, live.stems, basal.area, m.tree.area) %>%
cor(use='pairwise')
corrplot(c, method='color', order='hclust')
library('rgdal')
# Import the VRI data.
vri <- readOGR('../data/external/ska_vri.shp')
# Convert to data frame and do some cleaning.
vri.df <- as.data.frame(vri) %>%
dplyr::select(treed=BCLCS_LV_2, cover.type=BCLCS_LV_4,
density=BCLCS_LV_5, age1=PROJ_AGE_1,
age2=PROJ_AGE_2, v.complexity=VERT_COMPL,
crown.closure=CR_CLOSURE, live.stems=LIVE_STEMS,
basal.area=BASAL_AREA) %>%
mutate(live.stems=as.numeric(live.stems), age1=as.numeric(age1),
age2=as.numeric(age2))
# Assume NOGO only roost in forest.
vri.forest <- vri.df %>%
filter(treed == 'T') %>%
mutate(m.tr.area=basal.area/live.stems,
m.age=rowMeans(dplyr::select(., 4:5))) %>%
mutate(m.age=case_when(is.na(m.age) ~ as.numeric(age1),
TRUE ~ as.numeric(m.age)))
fc <- vri.forest %>% dplyr::select(age1, age2, m.age, v.complexity,
crown.closure, live.stems, basal.area,
m.tr.area) %>%
mutate_if(is.factor, as.numeric) %>%
cor(use='pairwise')
corrplot(fc, method='color', order='hclust')
# Convert to data frame and do some cleaning.
vri.df2 <- as.data.frame(vri) %>%
dplyr::select(treed=BCLCS_LV_2, cover.type=BCLCS_LV_4,
density=BCLCS_LV_5, age1=PROJ_AGE_1,
height=PROJ_HT_1, v.complexity=VERT_COMPL,
crown.closure=CR_CLOSURE, live.stems=LIVE_STEMS,
basal.area=BASAL_AREA)
# Assume NOGO only roost in forest.
vri.forest2 <- vri.df2 %>%
filter(treed == 'T') %>%
mutate_if(is.factor, as.numeric) %>%
mutate(m.tr.area=basal.area/live.stems)
fc2 <- vri.forest2 %>% dplyr::select(age1, height, v.complexity,
crown.closure, live.stems, basal.area,
m.tr.area) %>%
cor(use='pairwise')
corrplot(fc2, method='color', order='hclust', addCoef.col='black')
View(vri.forest2)
vri.forest2 %>% summarise_all(funs(sum(is.na(.))))
vri.forest2 %>% summarise_all(sum())
vri.forest2 %>% summarise_all(sum(.))
vri.forest2 %>% summarise_all(sum(is.na(.)))
vri.forest2 %>% summarise_all(mean())
vri.forest2 %>% summarise_all(list(med=median))
vri.forest2 %>% summarise_all(list(s=sum()))
vri.forest2 %>% summarise_all(list(s=sum(.)))
vri.forest2 %>% summarise_all(list(s=sum))
vri.forest2 %>% summarise_all(list(n=is.na))
map(vri.forest2, ~sum(is.na(.)))
map(vri.forest2, ~sum(is.na(.)))
View(vri.df2)
View(vri.df2)
vri.df2 %>%
filter(treed == 'T') %>%
distinct(cover.type)
View(vri)
df <- as.data.frame(vri)
View(df)
# Load some libraries.
library('tidyverse')
# Load the data.
used <- read.csv('../data/processed/h_roost_centroids_ska.csv')
avail <- read.csv('../data/processed/ska_random_variables.csv')
View(avail)
View(used)
library('rgdal')
unkn <- readOGR('../data/interim/h_ska_attributes.shp')
View(unkn)
# Load the data.
used <- read.csv('../data/processed/h_roost_attributes.csv')
View(used)
used %>% dplyr::select(!day)
used %>% dplyr::select(-day)
used %>% dplyr::select(-day) %>%
rename(ycoord=m.lat, xcoord=m.lon)
# Clean up the used columns.
used <- used %>% dplyr::select(-day) %>%
rename(ycoord=m.lat, xcoord=m.lon)
bind_rows(used, avail)
used <- used %>% dplyr::select(-day) %>%
rename(ycoord=m.lat, xcoord=m.lon) %>%
mutate(case=1)
# Load the data.
used <- read.csv('../data/processed/h_roost_attributes.csv')
# Clean up the used columns.
used <- used %>% dplyr::select(-day) %>%
rename(ycoord=m.lat, xcoord=m.lon) %>%
mutate(case=1)
# Add a case column to the available points, too.
avail <- avail %>%
mutate(case=0)
points <- bind_rows(used, avail)
View(points)
View(used)
points %>% dplyr::select(-id) %>%
mutate(m.tr.area=basal.area/live.stems)
points %>% dplyr::select(-id) %>%
mutate(m.tr.area=BASAL_AREA/LIVE_STEMS)
# And bind them.
points <- bind_rows(used, avail)
# Annoyingly, it added an id column. Remove that and add mean area.
points %>% dplyr::select(-id) %>%
mutate(m.tr.area=BASAL_AREA/LIVE_STEMS) %>%
rename(cover=BCLCS_LV_4, live.stems=LIVE_STEMS, basal.area=BASAL_AREA, canopy.closure=CR_CLOSURE, age=PROJ_AGE_1, v.comp=VERT_COMPL)
# Annoyingly, it added an id column. Remove that and add mean area.
points <- points %>% dplyr::select(-id) %>%
mutate(m.tr.area=BASAL_AREA/LIVE_STEMS) %>%
rename(cover=BCLCS_LV_4, live.stems=LIVE_STEMS, basal.area=BASAL_AREA, canopy.closure=CR_CLOSURE, age=PROJ_AGE_1, v.comp=VERT_COMPL)
View(points)
library('ggplot2')
binomial_smooth <- function(...) {
geom_smooth(method = "glm", method.args = list(family = "binomial"), ...)
}
ggplot(points, aes(x=age, y=case))+
stat_smooth(method='glm', method.args=list(family='binomial')) +
binomial_smooth(formula=y ~ splines::ns(x, 5), color='red')
ggplot(points, aes(x=canopy.closure, y=case)) +
stat_smooth(method='glm', method.args=list(family='binomial')) +
binomial_smooth(formula=y ~ splines::ns(x, 5), color='red')
ggplot(points, aes(x=v.comp, y=case)) +
stat_smooth(method='glm', method.args=list(family='binomial')) +
binomial_smooth(formula=y ~ splines::ns(x, 5), color='red')
class(points$v.comp)
class(points$canopy.closure)
ggplot(points, aes(x=live.stems, y=case)) +
stat_smooth(method='glm', method.args=list(family='binomial')) +
binomial_smooth(formula=y ~ splines::ns(x, 5), color='red')
ggplot(points, aes(x=basal.area, y=case)) +
stat_smooth(method='glm', method.args=list(family='binomial')) +
binomial_smooth(formula=y ~ splines::ns(x, 5), color='red')
ggplot(points, aes(x=m.tr.area, y=case)) +
stat_smooth(method='glm', method.args=list(family='binomial')) +
binomial_smooth(formula=y ~ splines::ns(x, 5), color='red')
library('ggplot2')
binomial_smooth <- function(...) {
geom_smooth(method = "glm", method.args = list(family = "binomial"), ...)
}
ggplot(points, aes(x=age, y=case)) +
stat_smooth(method='glm', method.args=list(family='binomial')) +
binomial_smooth(formula=y ~ splines::ns(x, 5), color='red')
ggplot(points, aes(x=canopy.closure, y=case)) +
stat_smooth(method='glm', method.args=list(family='binomial')) +
binomial_smooth(formula=y ~ splines::ns(x, 5), color='red')
ggplot(points, aes(x=v.comp, y=case)) +
stat_smooth(method='glm', method.args=list(family='binomial')) +
binomial_smooth(formula=y ~ splines::ns(x, 5), color='red')
ggplot(points, aes(x=live.stems, y=case)) +
stat_smooth(method='glm', method.args=list(family='binomial')) +
binomial_smooth(formula=y ~ splines::ns(x, 5), color='red')
ggplot(points, aes(x=basal.area, y=case)) +
stat_smooth(method='glm', method.args=list(family='binomial')) +
binomial_smooth(formula=y ~ splines::ns(x, 5), color='red')
ggplot(points, aes(x=m.tr.area, y=case)) +
stat_smooth(method='glm', method.args=list(family='binomial')) +
binomial_smooth(formula=y ~ splines::ns(x, 5), color='red')
library('ggplot2')
binomial_smooth <- function(...) {
geom_smooth(method = "glm", method.args = list(family = "binomial"), ...)
}
ggplot(points, aes(x=age, y=case)) +
stat_smooth(method='glm', method.args=list(family='binomial')) +
binomial_smooth(formula=y ~ splines::ns(x, 5), color='red')
ggplot(points, aes(x=canopy.closure, y=case)) +
stat_smooth(method='glm', method.args=list(family='binomial')) +
binomial_smooth(formula=y ~ splines::ns(x, 5), color='red')
ggplot(points, aes(x=v.comp, y=case)) +
stat_smooth(method='glm', method.args=list(family='binomial')) +
binomial_smooth(formula=y ~ splines::ns(x, 5), color='red')
ggplot(points, aes(x=live.stems, y=case)) +
stat_smooth(method='glm', method.args=list(family='binomial')) +
binomial_smooth(formula=y ~ splines::ns(x, 5), color='red')
ggplot(points, aes(x=basal.area, y=case)) +
stat_smooth(method='glm', method.args=list(family='binomial')) +
binomial_smooth(formula=y ~ splines::ns(x, 5), color='red')
ggplot(points, aes(x=m.tr.area, y=case)) +
stat_smooth(method='glm', method.args=list(family='binomial')) +
binomial_smooth(formula=y ~ splines::ns(x, 5), color='red')
# Load some libraries.
library('tidyverse')
# Load the data.
used <- read.csv('../data/processed/h_roost_attributes.csv')
avail <- read.csv('../data/processed/ska_random_variables.csv')
# Clean up the used columns.
used <- used %>% dplyr::select(-day) %>%
rename(ycoord=m.lat, xcoord=m.lon) %>%
mutate(case=1)
# Add a case column to the available points, too.
avail <- avail %>%
mutate(case=0)
# And bind them.
points <- bind_rows(used, avail)
# Annoyingly, it added an id column. Remove that and add mean area.
points <- points %>% dplyr::select(-id) %>%
mutate(m.tr.area=BASAL_AREA/LIVE_STEMS) %>%
rename(cover=BCLCS_LV_4, live.stems=LIVE_STEMS, basal.area=BASAL_AREA, canopy.closure=CR_CLOSURE, age=PROJ_AGE_1, v.comp=VERT_COMPL)
ggplot(points, aes(x=cover, y=..prop.., group=case, colour=case)) +
geom_bar(position="dodge", aes(fill=case))
points %>% as.factor(cover) %>%
ggplot(aes(x=cover, y=..prop.., group=case, colour=case)) +
geom_bar(position="dodge", aes(fill=case))
points %>% factor(cover) %>%
ggplot(aes(x=cover, y=..prop.., group=case, colour=case)) +
geom_bar(position="dodge", aes(fill=case))
points %>% factor(cover)
class(points$cover)
class(points$case)
factor(points$case)
points$case <- factor(points$case)
class(points$case)
ggplot(aes(x=cover, y=..prop.., group=case, colour=case)) +
geom_bar(position="dodge", aes(fill=case))
ggplot(points, aes(x=cover, y=..prop.., group=case, colour=case)) +
geom_bar(position="dodge", aes(fill=case))
points$case <- as.numeric(points$case)
class(points$case)
ggplot(points, aes(x=cover, y=..prop.., group=case, colour=case)) +
geom_bar(position="dodge", aes(fill=case))
ggplot(points, aes(x=cover, y=..prop.., group=case, colour=case)) +
geom_bar(position="dodge", aes(fill=case))
ggplot(points, aes(x=cover, y=..prop.., group=case, colour=case)) +
geom_bar(position="dodge", aes(fill=case))
points$w <- ifelse(points$case == 1, 1, 5000)
summary(glm(case ~ age + canopy.closure + m.tr.area + cover,
data=points, weight=w, family=binomial))
# And bind them.
points <- bind_rows(used, avail)
# Annoyingly, it added an id column. Remove that and add mean area.
points <- points %>% dplyr::select(-id) %>%
mutate(m.tr.area=BASAL_AREA/LIVE_STEMS) %>%
rename(cover=BCLCS_LV_4, live.stems=LIVE_STEMS, basal.area=BASAL_AREA, canopy.closure=CR_CLOSURE, age=PROJ_AGE_1, v.comp=VERT_COMPL)
ggplot(points, aes(x=cover, y=..prop.., group=case, colour=case)) +
geom_bar(position="dodge", aes(fill=case))
summary(glm(case ~ age + canopy.closure + m.tr.area + cover,
data=points, weight=w, family=binomial))
# Weight the available data.
points$w <- ifelse(points$case == 1, 1, 5000)
summary(glm(case ~ age + canopy.closure + m.tr.area + cover,
data=points, weight=w, family=binomial))
# Build the model.
summary(glm(case ~ age + canopy.closure + m.tr.area + cover, data=points, weight=w, family=binomial))
