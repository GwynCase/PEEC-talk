{"frames":[{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"roam %>% mutate(dial = case_when(datetime < sunset & datetime > \n    sunrise ~ \"day\", TRUE ~ \"night\"))","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"withVisible(eval(quote(`_fseq`(`_lhs`)), env, env))","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"eval(quote(`_fseq`(`_lhs`)), env, env)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"eval(quote(`_fseq`(`_lhs`)), env, env)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"`_fseq`(`_lhs`)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"freduce(value, `_function_list`)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"withVisible(function_list[[k]](value))","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"function_list[[k]](value)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"mutate(., dial = case_when(datetime < sunset & datetime > sunrise ~ \n    \"day\", TRUE ~ \"night\"))","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"mutate.data.frame(., dial = case_when(datetime < sunset & datetime > \n    sunrise ~ \"day\", TRUE ~ \"night\"))","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"as.data.frame(mutate(tbl_df(.data), ...))","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"mutate(tbl_df(.data), ...)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"tbl_df(.data)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"as_tibble(data, .name_repair = \"check_unique\")","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"as_tibble.data.frame(data, .name_repair = \"check_unique\")","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"as_tibble.list(unclass(x), ..., .rows = .rows, .name_repair = .name_repair)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"lst_to_tibble(x, .rows, .name_repair, col_lengths(x))","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"set_repaired_names(x, .name_repair)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"set_names(x, repaired_names(names(x), .name_repair = .name_repair))","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"set_names_impl(x, x, nm, ...)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"is_function(nm)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"is_closure(x)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"repaired_names(names(x), .name_repair = .name_repair)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"check_unique(new_name)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"abort(error_column_names_must_be_unique(name[dups]))","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"signal_abort(cnd)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"stop(fallback)","line_number":0}],"message":"Error: Column names `sunrise`, `sunset` must not be duplicated.\nUse .name_repair to specify repair.\n[90mRun `rlang::last_error()` to see where the error occurred.[39m\n"}