# Load some libraries.
library('tidyverse')
library('lubridate')
library('suncalc')
# Load in telemetry data.
tel.all <- read.csv('../data/processed/h_telem_all.csv', stringsAsFactors=F)
# Pull out the three sites I'm working with.
roam <- tel.all %>%
filter(site %in% c('SKA', 'RLK', 'MTC')) %>%
drop_na(lat)
# Do the datetime thing.
roam$date <- ymd(roam$date)
roam$datetime <- ymd_hms(roam$datetime, tz='America/Vancouver')
# Calculate sunrise and sunset times for each day.
roam <- getSunlightTimes(data=roam, keep=c('sunrise', 'sunset'),
tz='America/Vancouver')
# Classify points as daytime or nighttime.
roam <- roam %>%
mutate(dial=case_when(
datetime < sunset & datetime > sunrise ~ 'day',
TRUE ~ 'night'
))
# Pull out the nighttime points.
roam.night <- roam %>%
filter(dial == 'night')
# Save as a csv.
write.csv(roam.night, '../data/processed/h_roam_roost.csv')
# Round each point to the nearest midnight.
roam.night <- roam.night %>%
mutate(day=round_date(datetime, unit='day'))
# Average the locations.
centroids <- roam.night %>%
group_by(day) %>%
summarize(m.lat=mean(lat), m.lon=mean(lon))
# Save as a csv.
write.csv(centroids, '../data/processed/h_roam_roost.csv')
View(roam.night)
# Average the locations.
centroids <- roam.night %>%
group_by(site, day) %>%
summarize(m.lat=mean(lat), m.lon=mean(lon))
centroids
View(centroids)
# Save as a csv.
write.csv(centroids, '../data/processed/h_roam_roost.csv')
check <- read.csv('../data/processed/h_roam_roost_attributes.csv')
View(check)
roosts <- read.csv('../data/processed/h_used_utm.csv')
View(roosts)
used <- read.csv('../data/processed/h_used_utm.csv')
plot(used)
ggplot(used, aes(x=xcoord, y=ycoord)) +
geom_point()
available <- read.csv('../data/processed/available_utm.csv')
ggplot(available, aes(x=xcoord, y=ycoord)) +
geom_point()
unusued <- read.csv('../data/processed/unused_utm.csv')
ggplot(unused, aes(x=xcoord, y=ycoord)) +
geom_point()
unused <- read.csv('../data/processed/unused_utm.csv')
ggplot(unused, aes(x=xcoord, y=ycoord)) +
geom_point()
View(unused)
View(available)
View(used)
used <- read.csv('../data/processed/h_used_utm.csv')
available <- read.csv('../data/processed/available_utm.csv')
unused <- read.csv('../data/processed/unused_utm.csv')
View(used)
used %>%
dplyr::select(-field_1, -m.lat, -m.lon)
used %>%
dplyr::select(-field_1, -m.lat, -m.lon) %>%
mutate(case=1)
used <- used %>%
dplyr::select(-field_1, -m.lat, -m.lon) %>%
mutate(case=1)
available <- available %>% mutate(case=0)
unused <- unused %>% mutate(case=0)
uv.unused <- bind_rows(used, unused)
# Make two data sets.
uv.avail <- bind_rows(used, available)
View(uv.avail)
# Make two data sets.
uv.avail <- bind_rows(used, available) %>%
dplyr::select(-id)
uv.unused <- bind_rows(used, unused) %>%
dplyr::select(-id)
View(used)
available %>% filter(BCLCS_LV_4 == '')
available %>% mutate(BCLCS_LV_4=case_when(
BCLCS_LV_4 == '' ~ BCLCS_LV_5,
TRUE ~ BCLCS_LV_4
))
View(available)
available %>% mutate(BCLCS_LV_4=case_when(
BCLCS_LV_4 == '' ~ BCLCS_LV_5,
TRUE ~ as.character(BCLCS_LV_4)
))
class(available$BCLCS_LV_4)
used <- read.csv('../data/processed/h_used_utm.csv', stringsAsFactors=F)
available <- read.csv('../data/processed/available_utm.csv', stringsAsFactors=F)
unused <- read.csv('../data/processed/unused_utm.csv', stringsAsFactors=F)
# Do some cleanup.
used <- used %>%
dplyr::select(-field_1, -m.lat, -m.lon) %>%
mutate(case=1)
# Add a case attribute.
available <- available %>% mutate(case=0)
unused <- unused %>% mutate(case=0)
class(available$BCLCS_LV_4)
available %>% mutate(BCLCS_LV_4=case_when(
BCLCS_LV_4 == '' ~ BCLCS_LV_5,
TRUE ~ as.character(BCLCS_LV_4)
))
available %>% mutate(BCLCS_LV_4=case_when(
BCLCS_LV_4 == '' ~ BCLCS_LV_5,
TRUE ~ BCLCS_LV_4
))
available %>% mutate(BCLCS_LV_4=case_when(
BCLCS_LV_4 == '' ~ BCLCS_LV_5,
TRUE ~ BCLCS_LV_4
)) %>%
filter(BCLCS_LV_4 == '')
# Add a case attribute.
available <- available %>% mutate(case=0) %>%
mutate(BCLCS_LV_4=case_when(
BCLCS_LV_4 == '' ~ BCLCS_LV_5,
TRUE ~ BCLCS_LV_4
))
available <- read.csv('../data/processed/available_utm.csv', stringsAsFactors=F)
unused <- unused %>% mutate(case=0)%>%
mutate(BCLCS_LV_4=case_when(
BCLCS_LV_4 == '' ~ 'OT',
TRUE ~ BCLCS_LV_4
))
# Make two data sets.
uv.avail <- bind_rows(used, available) %>%
dplyr::select(-id)
uv.unused <- bind_rows(used, unused) %>%
dplyr::select(-id)
View(uv.avail)
library('ggplot2')
binomial_smooth <- function(...) {
geom_smooth(method = "glm", method.args = list(family = "binomial"), ...)
}
View(uv.unused)
ggplot(uv.unused, aes(x=CR_CLOSURE, y=case)) +
stat_smooth(method='glm', method.args=list(family='binomial')) +
binomial_smooth(formula=y ~ splines::ns(x, 5), color='red')
View(uv.unused)
ggplot(uv.unused, aes(x=CR_CLOSURE, y=case)) +
stat_smooth(method='glm', method.args=list(family='binomial')) +
binomial_smooth(formula=y ~ splines::ns(x, 5), color='red') +
facet_wrap(~site, scales="free")
ggplot(uv.unused, aes(x=BASAL_AREA, y=case)) +
stat_smooth(method='glm', method.args=list(family='binomial')) +
binomial_smooth(formula=y ~ splines::ns(x, 5), color='red')
binomial_smooth <- function(...) {
geom_smooth(method = "glm", method.args = list(family = "binomial"), ...)
}
ggplot(uv.unused, aes(x=CR_CLOSURE, y=case)) +
stat_smooth(method='glm', method.args=list(family='binomial')) +
binomial_smooth(formula=y ~ splines::ns(x, 5), color='red')
ggplot(uv.unused, aes(x=BASAL_AREA, y=case)) +
stat_smooth(method='glm', method.args=list(family='binomial')) +
binomial_smooth(formula=y ~ splines::ns(x, 5), color='red')
ggplot(uv.unused, aes(x=LIVE_STEMS, y=case)) +
stat_smooth(method='glm', method.args=list(family='binomial')) +
binomial_smooth(formula=y ~ splines::ns(x, 5), color='red')
ggplot(uv.unused, aes(x=VERT_COMPL, y=case)) +
stat_smooth(method='glm', method.args=list(family='binomial')) +
binomial_smooth(formula=y ~ splines::ns(x, 5), color='red')
ggplot(uv.unused, aes(x=SPEC_PCT_1, y=case)) +
stat_smooth(method='glm', method.args=list(family='binomial')) +
binomial_smooth(formula=y ~ splines::ns(x, 5), color='red')
ggplot(uv.unused, aes(x=PROJ_AGE_1, y=case)) +
stat_smooth(method='glm', method.args=list(family='binomial')) +
binomial_smooth(formula=y ~ splines::ns(x, 5), color='red')
ggplot(uv.unused, aes(x=PROJ_HT_1, y=case)) +
stat_smooth(method='glm', method.args=list(family='binomial')) +
binomial_smooth(formula=y ~ splines::ns(x, 5), color='red')
binomial_smooth <- function(...) {
geom_smooth(method = "glm", method.args = list(family = "binomial"), ...)
}
ggplot(uv.unused, aes(x=CR_CLOSURE, y=case)) +
stat_smooth(method='glm', method.args=list(family='binomial')) +
binomial_smooth(formula=y ~ splines::ns(x, 5), color='red')
ggplot(uv.unused, aes(x=BASAL_AREA, y=case)) +
stat_smooth(method='glm', method.args=list(family='binomial')) +
binomial_smooth(formula=y ~ splines::ns(x, 5), color='red')
ggplot(uv.unused, aes(x=LIVE_STEMS, y=case)) +
stat_smooth(method='glm', method.args=list(family='binomial')) +
binomial_smooth(formula=y ~ splines::ns(x, 5), color='red')
ggplot(uv.unused, aes(x=VERT_COMPL, y=case)) +
stat_smooth(method='glm', method.args=list(family='binomial')) +
binomial_smooth(formula=y ~ splines::ns(x, 5), color='red')
ggplot(uv.unused, aes(x=SPEC_PCT_1, y=case)) +
stat_smooth(method='glm', method.args=list(family='binomial')) +
binomial_smooth(formula=y ~ splines::ns(x, 5), color='red')
ggplot(uv.unused, aes(x=PROJ_AGE_1, y=case)) +
stat_smooth(method='glm', method.args=list(family='binomial')) +
binomial_smooth(formula=y ~ splines::ns(x, 5), color='red')
ggplot(uv.unused, aes(x=PROJ_HT_1, y=case)) +
stat_smooth(method='glm', method.args=list(family='binomial')) +
binomial_smooth(formula=y ~ splines::ns(x, 5), color='red')
ggplot(points, aes(x=BCLCS_LV_4, y=..prop.., group=case, colour=case)) +
geom_bar(position="dodge", aes(fill=case))
ggplot(uv.unused, aes(x=BCLCS_LV_4, y=..prop.., group=case, colour=case)) +
geom_bar(position="dodge", aes(fill=case))
ggplot(uv.unused, aes(x=BCLCS_LV_5, y=..prop.., group=case, colour=case)) +
geom_bar(position="dodge", aes(fill=case))
ggplot(uv.unused, aes(x=VERT_COMPL, y=..prop.., group=case, colour=case)) +
geom_bar(position="dodge", aes(fill=case))
ggplot(uv.unused, aes(x=BCLCS_LV_4, y=..prop.., group=case, colour=case)) +
geom_bar(position="dodge", aes(fill=case))
ggplot(uv.unused, aes(x=BCLCS_LV_5, y=..prop.., group=case, colour=case)) +
geom_bar(position="dodge", aes(fill=case))
ggplot(uv.unused, aes(x=VERT_COMPL, y=..prop.., group=case, colour=case)) +
geom_bar(position="dodge", aes(fill=case))
ggplot(uv.unused, aes(x=BCLCS_LV_4, y=..prop.., group=case, colour=case)) +
geom_bar(position="dodge", aes(fill=case))
ggplot(uv.unused, aes(x=BCLCS_LV_5, y=..prop.., group=case, colour=case)) +
geom_bar(position="dodge", aes(fill=case))
ggplot(uv.unused, aes(x=VERT_COMPL, y=..prop.., group=case, colour=case)) +
geom_bar(position="dodge", aes(fill=case))
